q()
x <- 0:3
3^x
B <- matrix(1:12, nrow = 3)
B
colsSums(B)
colSums(B)
dim(B)
apply(B,1, min)
rbind(1:4, 2:5)
b<- list(name = "Fred", wife = "Mary", child.ages = c(4,7,9))
b[[1]]
b["name"]
b[["name"]]
b$name
x <- array(1:24, dim = c(2, 3, 4))
x
aperm(A, c(3, 2, 4)
)
aperm(x, c(3, 2, 4))
aperm(x, c(3, 2, 4))
as.matrix(x)
x
class(x)
aperm(x, c(3, 2, 1))
x <- c(1,3)
x[5] <- 5
x
paste("x", 1:4, sep = "-")
b
A <- matrix(1:9, nrow = 3)
A
eigen(A)
x<-1:4
sin(x)
matrix(2:7, nrow = 2, byrow = F)
matrix(2:7, nrow = 2, byrow = T)
A <- marix(1:16, nrow = 4)
A <- matrix(1:16, nrow = 4)
A
A%*%A
rbind(1:3,1:6)
a <- data.frame(class = c(1,1,2,2,3,3,3),sex = c("女","男","男","女","女","女","男"),score = c(80,85,92,76,61,95,83))
a
a$class
a[1]
a$score[a[2] == "男"]
stem(data.frame$score)
data.frame$scores
data.frame$score
stem(a$score)
a$score
stem(a$score)
stem(43:76)
A <- matrix(c(1,2,1,1),nrow = 2)
b <- matrix(c(2,3),rnow = 2)
b
b <- matrix(c(2,3),rnow = 2)
b <- matrix(c(2,3),nrow = 2)
solve(A,b)
x <- 1:30
y <- x[x>25] - 20
y
x <- matrix(1:6,2,3)
y <- x[-1,]
y
z <- data.frame(INDEX = x, VALUE = y))
z <- data.frame(INDEX = x, VALUE = y)
x <- 1:4
y <- 2:5 + 2
z <- data.frame(INDEX = x, VALUE = y)
z
list(name = "John", age = 25, married = TRUE)
z
Newtons <- function(fun, x, ep = 1e-5, it_max = 100){
index = 0;
k = 1;
while(k <= it_max){
xl <- x; obj <- fun(x);
x <-xl - solve(obj$J, obj$f);
norm <- sqrt(x - xl);
if(x-xl < ep){
index = 1;
break;
}
k = k + 1;
}
obj <- fun(x);
list(root = x, it = k, index = index, FunVal = obj$f)
}
fun <- function(x){
f <- c(x[1]^2 + x[2]^2 - 5, (x[1] + 1) * x[2] - (3*x[1]+1));
J <- matrix(c(2*x[1], 2*x[2], x[2]-3, x[1]+1), nrow = 2, byrow = TRUE);
list(f = f, J = J);
}
Newtons(c(1,2))
Newtons(fun,c(1,1))
fun(c(1,2))
fun(c(4,3))
Newtons(fun,c(1,1))
Newtons(fun,c(1,1))
Newtons <- function(fun, x, ep = 1e-5, it_max = 100){
index = 0;
k = 1;
while(k <= it_max){
xl <- x; obj <- fun(x);
x <-xl - solve(obj$J, obj$f);
norm <- sqrt((x - xl)%*%(x-xl));
if(norm < ep){
index = 1;
break;
}
k = k + 1;
}
obj <- fun(x);
list(root = x, it = k, index = index, FunVal = obj$f)
}
Newtons(fun,c(1,1))
Newtons(fun,c(3,6))
Newtons(fun,c(30,26))
interval_estimate1 <- function(x, sigma = -1, alpha = 0.05){
n <- length(x);
mu <- mean(x);
if (sigma > 0){
temp <- qnorm(1-alpha/2)*sigma/sqrt(n);
df <- n;
} else{
sigma <- sd(x);
temp <- qt(1-alpha/2, df = n-1)*sigma/sqrt(n);
df <- n-1;
}
data.frame(mean = mu, df = df, l = mu - temp, r = mu + temp)
}
interval_estimate1(3:9)
x <- 3:9
t.test(x)
sd(x)^2
var(x)
interval_var1 <- function(x, mu = Inf, alpha){
n <- length(x);
if (mu < Inf){
S2 <- sum((x - mu)^2)/n;
df <- n
}
else {
S2 <- var(x)
df <- n - 1
}
l <- df * S2 / qchisq(1 - alpha/2, df)
r <- df * S2 / qchisq(alpha/2, df)
data.frame(var = S2, df = df, l = l, r = r)
}
interval_var1(x)
x
interval_var1 <- function(x, mu = Inf, alpha = 0.05){
n <- length(x);
if (mu < Inf){
S2 <- sum((x - mu)^2)/n;
df <- n
}
else {
S2 <- var(x)
df <- n - 1
}
l <- df * S2 / qchisq(1 - alpha/2, df)
r <- df * S2 / qchisq(alpha/2, df)
data.frame(var = S2, df = df, l = l, r = r)
}
interval_var1(x)
chisq.test(x)
numeric(3)
numeric(0)
length(numeric(0))
# 画一个t分布的图像
curve(dt(x, df = 5), -5, 5, col = "red", lwd = 2, ylab = "density", xlab = "x")
P_value <- function(cdf, x, paramet = numeric(0), side = 0){
n <- length(paramet);
P <- switch(n+1,
cdf(x),
cdf(x, paramet),
cdf(x, paramet[1], paramet[2]),
cdf(x, paramet[1], paramet[2], paramet[3]),
)
if (side < 0){
P
}else if(side > 0){
1 - P
}else{
if (P < 0.5){
2 * P
}
else{
2*(1-P)
}
}
}
P_value(pnorm,x,c(0,1))
P_value <- function(cdf,
x,
paramet = numeric(0),
side = 0) {
n <- length(paramet)
P <- switch(
n + 1,
cdf(x),
cdf(x, paramet),
cdf(x, paramet[1], paramet[2]),
cdf(x, paramet[1], paramet[2], paramet[3]),
)
if (side < 0) {
P
} else if (side > 0) {
1 - P
} else{
if (P < 0.5) {
2 * P
}
else{
2 * (1 - P)
}
}
}
P_value(pnorm,x,c(0,1))
P_value(pnorm,6,c(0,1))
P_value(pnorm,0,c(0,1))
P_value(pnorm,-6,c(0,1))
P_value(pnorm,-2,c(0,1))
P_value <- function(cdf,
x,
paramet = numeric(0),
side = 0) {
n <- length(paramet)
P <- switch(
n + 1,
cdf(x),
cdf(x, paramet),
cdf(x, paramet[1], paramet[2]),
cdf(x, paramet[1], paramet[2], paramet[3]),
)
if (side < 0) {
P
} else if (side > 0) {
1 - P
} else{
if (P < 0.5) {
2 * P
}
else{
2 * (1 - P)
}
}
}
mean.test1 <- function(x, mu = 0, sigma = -1, side = 0){
n <- length(x);
xb <- mean(x);
if (sigma > 0){
z <- (xb - mu)/(sigma/sqrt(n));
P <- P_value(pnorm, z, side = side);
data.frame(mean = xb, df = n, z = z, P_value = P)
}else{
t <- (xb - mu)/(sd(x)/sqrt(n));
P <- P_value(pt, t, n - 1, side = side);
data.frame(mean = xb, df = n - 1, t = t, P_value = P)
}
}
mean.test1(x)
mean.test1(x,6)
mean.test1(x,7)
var.test1 <- function(x, sigma2 = 1, mu = Inf, side = 0){
n <- length(x);
if (mu < Inf){
df <- n
S2 <- sum((x - mu)^2)/df
}else{
df <- n - 1
S2 <- var(x)
}
chisq <- df * S2/sigma2
P <- P_value(pchisq, chisq, df, side = side)
data.frame(var = S2, df = df, chisq = chisq, P_value = P)
}
var.test1(x)
rm(list = ls())
plot(y~x)
# 线性回归
x <- c(1,2,3,4,5)
y <- c(2,4,7,8,9)
plot(y~x)
line(y~x)
lm.sol <- lm(y~x)
summary(lm.sol)
lm.sol <- lm(y~1 + x)
summary(lm.sol)
matrix(1:4,nrow = 1)
matrix(1:4,nrow = 1,dimnames = list('name',1:4))
matrix(1:4,dimnames = list('name',1:4))
matrix(1:4)
lamp<-data.frame(
X=c(1600, 1610, 1650, 1680, 1700, 1700, 1780, 1500, 1640,
1400, 1700, 1750, 1640, 1550, 1600, 1620, 1640, 1600,
1740, 1800, 1510, 1520, 1530, 1570, 1640, 1600),
A=factor(c(rep(1,7),rep(2,5), rep(3,8), rep(4,6)))
)
lamp.aov<-aov(X ~ A, data=lamp)
summary(lamp.aov)
class(summary(lamp.aov))
tab <- summary(lamp.aov)
tab[[1]]
length(tab[[1]])
x
rbind(1:2,2:3,3:4)
length(rbind(1:2,2:3,3:4))
length(rbind(1:2,2:3,3:4))
length(as.matrix(rbind(1:2,2:3,3:4)))
rbind(1:2,2:3,3:4)
tab
rep(1,2,3,4,c(5,3,4,2))
?rep
rep(1:4,c(5,3,4,2))
rep(c(1,2,3,4),c(5,3,4,2))
A <- matrix(1:4,nrow = 2)
A <- matrix(1:4,nrow = 2,ncol = 2)
e<-eigen()
e<-eigen(A)
e$values
e$vectors
data.frame(
的身份 = c(1,2,2)
)
data.frame(
"的身份" = c(1,2,2)
)
data.frame(
"的身份" = c(1,2,2)
)
data.frame(
"(的)身份" = c(1,2,2)
)
data.frame(
"（的）身份" = c(1,2,2)
)
data.frame(
"（的）身份" = c(1,2,2)
)
data.frame(
"（的）身份" = c(1,2,2)
)
x <- c(5.1, 3.5, 7.1, 6.2, 8.8, 7.8, 4.5, 5.6, 8.0, 6.4)
y <- c(1907, 1287, 2700, 2373, 3260, 3000, 1947, 2273, 3113, 2493)
plot(x,y)
lm.sol <- lm(y ~ x)
summary(lm.sol)
abline(lm.sol)
?abline
summary(lm.sol)
plot(x,y)
abline(140,364)
summary(lm.sol)
predict(lm.sol, data.frame(x=7))
q(0.05/2)
q(0.05/2)
qt(0.05/2)
qnorm(0.05/2)
qnorm(1-0.05/2)
qchisq(0.05/2,10)
qchisq(1-0.05/2,10)
